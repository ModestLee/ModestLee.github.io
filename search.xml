<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GitHub配置SSH密钥]]></title>
    <url>%2F2018%2F04%2F16%2Fgit-ssh%2F</url>
    <content type="text"><![CDATA[Git可以通过https方式和ssh方式连接服务器上的仓库。 两者比较：1.https： 比较方便，但是每次fetch和push代码都需要输入账号和密码，略显麻烦2.ssh： 传输前压缩数据，传输效率高，不需要每次提供账号密码 因此，我们在向GItHub上提交数据的时候选择使用ssh，这里就讲一下如何配置GitHub上的SSH密钥 配置username和email注册好GitHub账号并且安装好Git之后，在你的电脑中的任何一个文件内右击，然后在右击菜单栏里选择Git Bash here,然后出现下图所示的界面（隐藏的为用户名） 然后输入命令 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;your email&quot; 其中email为你注册Github时用到的邮箱名字 生成密钥在git bash 里输入以下命令 12cd ~/.sshls 查看是否已经有了ssh key密钥，如果有可以备份一下因为新产生的密钥会覆盖旧的，如果没有执行命令 1ssh-keygen -t rsa -C "your email" 然后一路回车，不要输入任何东西就会得到下图所示的界面 .ssh目录会生成id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人. 如果之前此电脑已经生成过密钥，根据提示在overwrite的时候选择 y 覆盖即可。 添加SSH key到GitHub账户登录Github，然后点击右上角的账户，选择setting，之后选择SSH and GPG keys，如图所示 然后点击右上角的New SSH key出现如下图的界面 Title为自己写的标题，key的内容为上一步生成的id_rsa.pub文件中内容，文件一般放在C:\Users\yourname\.ssh 内，填写完成之后点击Add SSH key就可以添加SSH key了。 测试SSH key 是否设置成功在Git bash里输入命令 1ssh -T git@github.com 然后输入yes 就会输出以下提示，表示通过 1Hi xxxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 到此，GItHub上配置SSH key就结束了！]]></content>
      <categories>
        <category>hexo</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用GitHub+Hexo搭建博客]]></title>
    <url>%2F2018%2F04%2F16%2Fhexobuild1%2F</url>
    <content type="text"><![CDATA[利用Hexo+GitHub搭建属于自己的Blog，不为别的，就为记录自己的成长记录！ Hexo是一款快速、简洁并且高效的博客框架，支持Markdown语法，拥有丰富的插件，最重要的是可以一键部署到GitHub，让你快速拥有自己的Blog，So？那还等什么，一起来吧！！！ 准备你需要准备好以下软件： Node.js环境 Git环境 Windows系统下的安装配置Node.js环境下载Node.js安装文件： Windows Installer 32-bit Windows Installer 64-bit 根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。 如图所示： 保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口： 在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入 12node -vnpm -v 如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。 配置Git环境下载Git安装文件： Git下载地址自动识别系统版本 然后就进入了Git的安装界面，如图： 和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择： 这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。 一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入： 1git --version 如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。 Linux提上日程，马上安排更新= = Mac OS穷逼一个。。。。。。等买得起了再来更新 配置Github注册账号如果已经拥有账号，请跳过此步~ 打开https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。 然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。 一定要确认注册，否则无法使用gh-pages！ 创建代码库登陆之后，点击页面右上角的加号，选择New repository： 进入代码库创建页面： 在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示： 注意：比如我的github名称是modestlee,这里你就填 modestlee.github.io,如果你的名字是xiaoming，那你就填 xiaoming.github.io 正确创建之后，你将会看到如下界面： 开启gh-pages功能点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图： 现在GitHub默认已经开启了GitHub Pages功能。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。 配置Hexo安装Hexo在自己认为合适的地方创建一个空文件夹，然后在文件夹空白处按住Shift+鼠标右键，然后点击在此处打开命令行窗口(win10系统为此处打开PowerShell窗口。（同样要记住啦，下文中会使用在当前目录打开命令行来代指上述的操作） 在命令行中输入： 1npm install hexo-cli -g 然后你将会看到: 可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入 1npm install hexo --save 然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入： 1hexo -v 如果你看到了如图文字，则说明已经安装成功了。 初始化Hexo接着上面的操作，输入： 1hexo init 如图： 然后输入： 1npm install 之后npm将会自动安装你需要的组件，只需要等待npm操作即可。 首次体验Hexo继续操作，同样是在命令行中，输入： 1hexo g 如图： 然后输入： 1hexo s 然后会提示： 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 在浏览器中打开http://localhost:4000/，你将会看到： 如果没有出现页面并且浏览器一直在转圈请使用以下命令 1hexo server -p 端口号 端口号可以自己定义但是不要和系统的重复 到目前为止，Hexo在本地的配置已经全都结束了。 使用Hexo 在配置过程中请使用yamllint来保证自己的yaml语法正确 修改全局配置文件此段落引用自Hexo官方文档 您可以在 _config.yml 中修改大部份的配置。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_default 永久链接中各部分的默认值 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 `downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 MMM D YYYY time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 将Hexo与GitHub page联系起来配置个人信息首先，你需要为自己配置身份信息，打开命令行，然后输入： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 同样在_config.yml文件中，找到Deployment，然后按照如下修改： 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 如果使用git方式进行部署，执行npm install hexo-deployer-git --save来安装所需的插件 然后在当前目录打开命令行，输入： 1hexo d 随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。 然后通过http://yourname.github.io/来访问自己刚刚上传的网站。 添加新文章打开Hexo目录下的source文件夹，所有的文章都会以md形式保存在_post文件夹中，只要在_post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示： 123456---title: hello-world //在此处添加你的标题。date: 2018-4-16 08:55:29 //在此处输入你编辑这篇文章的时间。categories: Exercise //在此处输入这篇文章的分类。toc: true //在此处设定是否开启目录，需要主题支持。--- 遇到的问题如果出现以下问题 Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 说明没有配置好public key所导致的具体配置方式参见GitHub配置SSH 有问题请留言 参考文章手把手教你用Hexo+Github 搭建属于自己的博客 史上最详细的Hexo博客搭建图文教程 官网]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客历程]]></title>
    <url>%2F2018%2F04%2F11%2Ftrajectory%2F</url>
    <content type="text"></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
